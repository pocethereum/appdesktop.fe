/*
 This file is part of web3.js.

 web3.js is free software: you can redistribute it and/or modify
 it under the terms of the GNU Lesser General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 web3.js is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
 */
/** @file mindev.js
 * @authors:
 *   Q.Bryant <q.bryant@live.com>
 * @date 2019
 */

"use strict";

var _ = require('underscore');
var core = require('web3-core');
var Method = require('web3-core-method');
var utils = require('web3-utils');
var Net = require('web3-net');
var formatters = require('web3-core-helpers').formatters;

function isJson(str) {
  if (typeof str == 'string') {
    try {
      var obj=JSON.parse(str);
      if(typeof obj == 'object' && obj ){
        return true;
      }else{
        return false;
      }
    } catch(e) {
      console.log('errorï¼š'+str+'!!!'+e);
      return false;
    }
  }
  console.log('It is not a string!')
}

var blockCall = function (args) {
  return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? "eth_getBlockByHash" : "eth_getBlockByNumber";
};

var blockPocCall = function (args) {
  return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? "eth_getBlockPocByHash" : "eth_getBlockPocByNumber";
};

var settingCall = function (args) {
  switch(args[0]){
    case "HOSTNAME":
      if (!_.isString(args[0])) {
        throw new Error('"HOSTNAME" setting value must be string')
      }
      break
    case "PLOTDIRS":
      let str = args[1]
      if (typeof str == 'string') {
        try {
          var obj=JSON.parse(str);
          if(typeof obj != 'object' || !obj ){
            throw new Error('"HOSTNAME" setting value must be "json string"')
          }
        } catch(e) {
          throw new Error('"HOSTNAME" setting value must be "json string"')
        }
      }else{
        args[1] = JSON.stringify(str)
      }
      break
    default:
      throw new Error('Setting name must be one of "HOSTNAME/PLOTDIRS"')
  }
  return "minedev_setting";
};

var methods = [
  new Method ({
    name: 'Status',
    call: 'minedev_status',
  }),

  new Method ({
    name: 'Bind',
    call: 'minedev_bind',
    params: 2,
    inputFormatter: [formatters.inputAddressFormatter, undefined],
    outputFormatter: undefined
  }),

  new Method ({
    name: 'Unbind',
    call: 'minedev_unbind',
    params: 2,
    inputFormatter: [formatters.inputAddressFormatter, undefined],
    outputFormatter: undefined
  }),

  new Method ({
    name: 'Restart',
    call: 'minedev_restart',
  }),

  new Method ({
    name: 'Setting',
    call: 'minedev_setting',
    params: 2,
  }),

  new Method ({
    name: 'Getting',
    call: 'minedev_getting',
    params: 1,
  }),

  new Method({
    name: 'getTotalRewarded',
    call: "eth_getTotalRewarded",
    params: 1,
    inputFormatter: [formatters.inputBlockNumberFormatter],
    outputFormatter: formatters.outputBigNumberFormatter
  }),

  new Method({
    name: 'getTotalMortgage',
    call: "eth_getTotalMortgage",
    params: 1,
    inputFormatter: [formatters.inputBlockNumberFormatter],
    outputFormatter: formatters.outputBigNumberFormatter
  }),

  new Method({
    name: 'getBlock',
    call: blockCall,
    params: 1,
    inputFormatter: [formatters.inputBlockNumberFormatter],
    outputFormatter: formatters.outputBlockFormatter
  }),

  new Method({
    name: 'getPocBlock',
    call: blockPocCall,
    params: 1,
    inputFormatter: [formatters.inputBlockNumberFormatter],
    outputFormatter: undefined
  }),
];


var properties = [
    // new Property ({
    // 	name: 'status',
    // 	getter: 'minedev_status'
    // }),
];

var Minedev = function Minedev () {
  var _this = this;
  // sets _requestmanager
  core.packageInit(this, arguments);

  this.net = new Net(this.currentProvider);
  // sets _requestmanager
  core.packageInit(this, arguments);

  this.net = new Net(this.currentProvider);

  methods.forEach (function (method) {
    method.attachToObject(_this);
    method.setRequestManager(_this._requestManager);
    method.defaultBlock = _this.defaultBlock;
    method.defaultAccount = _this.defaultAccount;
  });

  properties.forEach (function (p) {
    p.attachToObject (_this);
    p.setRequestManager (_this._requestManager);
  });
}

core.addProviders(Minedev);

module.exports = Minedev;

